// Generated by CoffeeScript 1.3.3
(function() {
  var BitmapAnimation, Container, EventsDispatcher, HexTile, SpriteSheet, Stage, Ticker, Tween, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventsDispatcher = Game.EventsDispatcher, HexTile = Game.HexTile;

  _ref = this.createjs, Ticker = _ref.Ticker, Stage = _ref.Stage, Container = _ref.Container, SpriteSheet = _ref.SpriteSheet, BitmapAnimation = _ref.BitmapAnimation, Tween = _ref.Tween;

  Game.Entity = (function(_super) {

    __extends(Entity, _super);

    function Entity() {
      return Entity.__super__.constructor.apply(this, arguments);
    }

    Entity.prototype.initialize = function() {
      this.tileX = 0;
      this.tileY = 0;
      this.sprite = new Container();
      this.walkDuration = 1000;
      this.height = 0;
      return this.onSpawn();
    };

    Entity.prototype.send = function() {
      this.trigger.apply(this, arguments);
      return this;
    };

    Entity.prototype.attack = function() {
      this.onAttack();
      return this;
    };

    Entity.prototype.die = function() {
      this.onDie();
      return this;
    };

    Entity.prototype.face = function(leftOrRight) {
      if (leftOrRight != null) {
        this.sprite.scaleX = leftOrRight === "left" ? -1 : 1;
        return this;
      } else {
        if (this.sprite.scaleX === -1) {
          return "left";
        } else {
          return "right";
        }
      }
    };

    Entity.prototype.sheetData = function(sheetData) {
      var animation, spriteSheet,
        _this = this;
      if (sheetData == null) {
        return;
      }
      spriteSheet = new SpriteSheet(sheetData);
      animation = new BitmapAnimation(spriteSheet);
      animation.onAnimationEnd = function(a, label) {
        return _this.onAnimationEnd(label, a);
      };
      this.reg = function(x, y) {
        animation.regX = x;
        return animation.regY = y;
      };
      this.pause = function() {
        return animation.paused = true;
      };
      this.play = function(frameOrLabel) {
        if (frameOrLabel != null) {
          return animation.gotoAndPlay(frameOrLabel);
        } else {
          return animation.play();
        }
      };
      this.stop = function(frameOrLabel) {
        if (frameOrLabel != null) {
          return animation.gotoAndStop(frameOrLabel);
        } else {
          return animation.stop();
        }
      };
      this.totalFrames = function() {
        return spriteSheet.getNumFrames();
      };
      this.spriteSheet = spriteSheet;
      this.animation = animation;
      this.sprite.addChild(animation);
      this.stop(0);
      return this.onSheetData();
    };

    Entity.prototype.walk = function() {
      if (!(arguments.length > 0)) {
        return;
      }
      if (arguments[0] instanceof Array) {
        this.walkList.apply(this, arguments);
      } else {
        this.walkTo.apply(this, arguments);
      }
      return this;
    };

    Entity.prototype.walkList = function(points, walkDuration) {
      var i, point, tween, _fn, _i, _len,
        _this = this;
      if (walkDuration == null) {
        walkDuration = this.walkDuration;
      }
      tween = Tween.get(this.sprite);
      _fn = function() {
        var hex, nextPoint, x, y;
        x = point[0], y = point[1];
        nextPoint = points[i + 1];
        hex = HexTile.position(x, y, true);
        tween = tween.to({
          x: hex.x,
          y: hex.y
        }, walkDuration);
        return tween = tween.call(function() {
          var nextHex;
          _this.tileX = x;
          _this.tileY = y;
          if (nextPoint != null) {
            nextHex = HexTile.position(nextPoint[0], nextPoint[1], true);
            if (nextHex.x > hex.x) {
              return _this.face('right');
            } else {
              return _this.face('left');
            }
          }
        });
      };
      for (i = _i = 0, _len = points.length; _i < _len; i = ++_i) {
        point = points[i];
        _fn();
      }
      tween = tween.call(function() {
        if (walkDuration > 0) {
          _this.onWalkEnd();
        }
        return _this.trigger('walkEnd');
      });
      if (walkDuration > 0) {
        return this.onWalk();
      }
    };

    Entity.prototype.walkTo = function(x, y, walkDuration) {
      var hex;
      if (walkDuration == null) {
        walkDuration = this.walkDuration;
      }
      hex = HexTile.position(x, y, true);
      this.tileX = x;
      this.tileY = y;
      this.sprite.x = hex.x;
      return this.sprite.y = hex.y;
    };

    Entity.prototype.onAnimationEnd = function() {};

    Entity.prototype.onSheetData = function() {};

    Entity.prototype.onSpawn = function() {};

    Entity.prototype.onWalk = function() {};

    Entity.prototype.onWalkEnd = function() {};

    Entity.prototype.onAttack = function() {};

    Entity.prototype.onDie = function() {};

    return Entity;

  })(EventsDispatcher);

}).call(this);
