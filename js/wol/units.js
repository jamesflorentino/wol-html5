// Generated by CoffeeScript 1.3.3
(function() {
  var Entity, Units, randomIdle,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = Game.Entity, Units = Game.Units;

  randomIdle = function(seconds) {
    if (seconds == null) {
      seconds = 2;
    }
    return Math.random() * seconds * 1000;
  };

  Units.Marine = (function(_super) {

    __extends(Marine, _super);

    function Marine() {
      return Marine.__super__.constructor.apply(this, arguments);
    }

    Marine.prototype.onSheetData = function() {
      this.play('idleIn');
      this.reg(0, 8);
      this.walkDuration = 500;
      return this.spriteSheet.getAnimation('onMoveStart').next = 'onMove';
    };

    Marine.prototype.onAnimationEnd = function(label, animation) {
      var spriteSheet,
        _this = this;
      spriteSheet = animation.spriteSheet;
      prevent(this.timeout);
      switch (label) {
        case 'idleIn':
          return this.play('idleOut');
        case 'idleOut':
          this.stop('idleIn');
          return this.timeout = after(4000, function() {
            return _this.play('idleIn');
          });
        case 'onMoveStart':
          return this.play('onMove');
        case 'onMoveEnd':
          return this.play('idleIn');
        case 'onRifleShotStart':
          return this.play('onRifleShot1');
        case 'onRifleShot1':
          return this.play('onRifleShot2');
        case 'onRifleShot2':
          return this.play('onRifleShot3');
        case 'onRifleShot3':
          return this.play('onRifleShot4');
        case 'onRifleShot4':
          return this.play('onRifleShotEnd');
        case 'onRifleShotEnd':
          return this.play('idleIn');
      }
    };

    Marine.prototype.onWalk = function() {
      return this.play('onMoveStart');
    };

    Marine.prototype.onWalkEnd = function() {
      return this.play('onMoveEnd');
    };

    Marine.prototype.onAttack = function() {
      return this.play('onRifleShotStart');
    };

    return Marine;

  })(Entity);

  Units.Vanguard = (function(_super) {

    __extends(Vanguard, _super);

    function Vanguard() {
      return Vanguard.__super__.constructor.apply(this, arguments);
    }

    Vanguard.prototype.onSheetData = function() {
      this.stop(0);
      this.reg(25, 15);
      return this.walkDuration = 1800;
    };

    Vanguard.prototype.onAnimationEnd = function(label, animation) {
      var spriteSheet;
      spriteSheet = animation.spriteSheet;
      switch (label) {
        case 'walkStart':
          return this.play('walk');
        case 'walk':
          if (!this.walking) {
            return this.play('walkEnd');
          }
          break;
        case 'walkEnd':
          return this.stop(0);
        case 'attackStart':
          return this.play('attack1');
        case 'attack1':
          return this.play('attack2');
        case 'attack2':
          return this.stop(0);
        case 'onDieStart':
          return this.stop('onDieStart');
      }
    };

    Vanguard.prototype.onWalk = function() {
      this.walking = true;
      return this.play('walkStart');
    };

    Vanguard.prototype.onWalkEnd = function() {
      return this.walking = false;
    };

    Vanguard.prototype.onAttack = function() {
      return this.play('attackStart');
    };

    Vanguard.prototype.onDie = function() {
      return this.play('death');
    };

    return Vanguard;

  })(Entity);

}).call(this);
