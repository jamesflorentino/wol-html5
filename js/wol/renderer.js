// Generated by CoffeeScript 1.3.3
(function() {
  var Bitmap, Container, Entity, EventsDispatcher, Stage, Ticker, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = Game.Entity, EventsDispatcher = Game.EventsDispatcher;

  _ref = this.createjs, Ticker = _ref.Ticker, Stage = _ref.Stage, Container = _ref.Container, Bitmap = _ref.Bitmap;

  Game.Scene = (function(_super) {

    __extends(Scene, _super);

    function Scene() {
      this.render = __bind(this.render, this);
      return Scene.__super__.constructor.apply(this, arguments);
    }

    Scene.prototype.initialize = function(canvasDOM) {
      this.stage = new Stage(canvasDOM);
      this.background = new Container;
      this.terrain = new Container;
      this.layers = {};
      this.stage.addChild(this.background);
      this.stage.addChild(this.terrain);
      Ticker.addListener(this.render);
      return Ticker.setFPS(30);
    };

    Scene.prototype.addEntity = function(entity, container) {
      if (container != null) {
        container.addChild(entity.sprite);
        return entity;
      }
      this.stage.addChild(entity.sprite);
      return entity;
    };

    Scene.prototype.addLayer = function(name) {
      this.layers[name] = new Container;
      this.stage.addChild(this.getLayer(name));
      return this;
    };

    Scene.prototype.getLayer = function(name) {
      return this.layers[name];
    };

    Scene.prototype.pause = function() {
      Ticker.setPaused(true);
      return this;
    };

    Scene.prototype.play = function() {
      Ticker.setPaused(false);
      return this;
    };

    Scene.prototype.render = function() {
      this.stage.update();
      this.update();
      return this;
    };

    Scene.prototype.setBackground = function(image) {
      if (image == null) {
        return;
      }
      this.background.addChild(new Bitmap(image));
    };

    Scene.prototype.setTerrain = function(image) {
      if (image == null) {
        return;
      }
      this.terrain.addChild(new Bitmap(image));
    };

    Scene.prototype.update = function() {};

    return Scene;

  })(Game.EventsDispatcher);

}).call(this);
