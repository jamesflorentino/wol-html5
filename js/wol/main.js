// Generated by CoffeeScript 1.3.3
(function() {
  var AssetLibrary, Bitmap, ClassManager, Container, Ease, Entity, EventsDispatcher, HexTile, Particle, Scene, Shape, SheetData, SpriteSheet, SpriteSheetUtils, Ticker, Tween, Units, Vector, WingsOfLemuriaTactics,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scene = Game.Scene, EventsDispatcher = Game.EventsDispatcher, Entity = Game.Entity, Units = Game.Units, HexTile = Game.HexTile;

  AssetLibrary = Game.AssetLibrary, ClassManager = Game.ClassManager, SheetData = Game.SheetData;

  Shape = createjs.Shape, Ticker = createjs.Ticker, Ease = createjs.Ease, Tween = createjs.Tween, Container = createjs.Container, SpriteSheet = createjs.SpriteSheet, SpriteSheetUtils = createjs.SpriteSheetUtils, Bitmap = createjs.Bitmap;

  Vector = (function() {

    function Vector() {}

    Vector.prototype.speed = 10;

    Vector.prototype.time = 0;

    return Vector;

  })();

  Particle = (function() {

    Particle.prototype.originX = 0;

    Particle.prototype.originY = 0;

    Particle.prototype.speed = 10;

    Particle.prototype.time = 0;

    function Particle(image) {
      this.index = null;
      this.texture = new Bitmap(image);
      this.texture.compositeOperation = 'lighter';
      this.texture.regX = image.naturalWidth * 0.5;
      this.texture.regY = image.naturalHeight * 0.5;
      this.setOrigin(0, 0);
      this.speed = 10 * Math.PI / 180;
      this.time = new Date().getTime() * Math.random();
      this.timeX = new Date().getTime() * Math.random();
      this.texture.scaleX = this.texture.scaleY = 0.25 * Math.random();
    }

    Particle.prototype.die = function() {
      return this.complete = true;
    };

    Particle.prototype.followEntity = function(entity) {
      this.entity = entity;
    };

    Particle.prototype.setOrigin = function(x, y) {
      this.originX = x;
      return this.originY = y;
    };

    Particle.prototype.update = function() {
      if (this.entity != null) {
        this.setOrigin(this.entity.sprite.x, this.entity.sprite.y + 40);
      }
      this.texture.x = this.originX + Math.sin(this.timeX) * 40;
      this.texture.y = this.originY + Math.cos(this.time * 0.25) * 20;
      this.texture.alpha = Math.abs(Math.cos(this.time));
      this.time += this.speed;
      return this.timeX += this.speed * 0.5;
    };

    Particle.prototype.x = function(x) {
      if (x != null) {
        this.texture.x = x;
      }
      return this.texture.x;
    };

    Particle.prototype.y = function(y) {
      if (y != null) {
        this.texture.y = y;
      }
      return this.texture.y;
    };

    return Particle;

  })();

  WingsOfLemuriaTactics = (function() {

    function WingsOfLemuriaTactics() {
      this.update = __bind(this.update, this);

      this.assetsReady = __bind(this.assetsReady, this);

      this.addUnit = __bind(this.addUnit, this);

      var canvas;
      canvas = document.querySelector('canvas#game');
      canvas.height = 450;
      this.particles = [];
      this.scene = new Scene(canvas);
      this.scene.update = this.update;
      this.scene.pause();
      this.scene.addLayer('tiles');
      this.scene.addLayer('units');
      this.scene.addLayer('fx');
      this.fxLayer = this.scene.getLayer('fx');
      this.fxParticle = new Container;
      this.fade = new Shape;
      this.fade.graphics.beginFill('rgba(0,0,0,0.1)').drawRect(0, 0, canvas.width, canvas.height);
      this.fxLayer.addChild(this.fade, this.fxParticle);
      this.fxLayer.cache(0, 0, canvas.width, canvas.height);
      this.fxLayer.compositeOperation = 'lighter';
      this.setTerrainPosition(5, 70);
      this.scene.terrain.x = 0;
      this.classes = new ClassManager;
      this.assets = new AssetLibrary;
      this.assets.add('background', 'images/background.png');
      this.assets.add('terrain', 'images/terrain.png');
      this.assets.add('elements', 'images/elements.png');
      this.classes.register('marine', Units.Marine);
      this.assets.add('marine', 'images/marine.png');
      this.classes.register('vanguard', Units.Vanguard);
      this.assets.add('vanguard', 'images/vanguard.png');
      this.assets.complete(this.assetsReady);
      this.assets.preload();
      return;
    }

    WingsOfLemuriaTactics.prototype.addUnit = function(code, attributes) {
      var asset, entity, sheetData;
      asset = this.assets.get(code);
      sheetData = SheetData.get(code, asset);
      entity = this.classes.create(code);
      entity.sheetData(sheetData);
      this.scene.getLayer('units').addChild(entity.sprite);
      return entity;
    };

    WingsOfLemuriaTactics.prototype.addParticle = function(unit, name) {
      var i, image, particle, particles, _i;
      if (name == null) {
        name = 'shield';
      }
      particles = [];
      image = this.assets.get(name);
      for (i = _i = 0; _i <= 10; i = ++_i) {
        particle = new Particle(image);
        particle.index = i;
        particle.followEntity(unit);
        this.particles.push(particle);
        particles.push(particle);
        this.fxLayer.addChild(particle.texture);
      }
      return particles;
    };

    WingsOfLemuriaTactics.prototype.assetsReady = function() {
      var assetName, assetNames, spriteSheet, _i, _len;
      spriteSheet = new SpriteSheet(SheetData.elements(this.assets.get('elements')));
      assetNames = spriteSheet.getAnimations();
      for (_i = 0, _len = assetNames.length; _i < _len; _i++) {
        assetName = assetNames[_i];
        this.assets.add(assetName, SpriteSheetUtils.extractFrame(spriteSheet, assetName));
      }
      this.scene.setBackground(this.assets.get('background'));
      this.scene.setTerrain(this.assets.get('terrain'));
      this.setScene();
      return this.testUnit();
    };

    WingsOfLemuriaTactics.prototype.generateGrid = function() {
      var bitmap, column, columns, container, image, row, rows, tilePosition, _i, _j;
      rows = 7;
      columns = 8;
      container = new Container;
      image = this.assets.get('hex_bg');
      for (row = _i = 0; 0 <= rows ? _i <= rows : _i >= rows; row = 0 <= rows ? ++_i : --_i) {
        for (column = _j = 0; 0 <= columns ? _j <= columns : _j >= columns; column = 0 <= columns ? ++_j : --_j) {
          bitmap = new Bitmap(image);
          tilePosition = HexTile.position(column, row);
          bitmap.x = tilePosition.x;
          bitmap.y = tilePosition.y;
          container.addChild(bitmap);
        }
      }
      return this.scene.getLayer('tiles').addChild(container);
    };

    WingsOfLemuriaTactics.prototype.moveUnit = function(unit, tiles) {
      var hexTileImage, hexTiles, i, tileLayer, _i, _len;
      hexTiles = this.showTiles([[unit.tileX, unit.tileY]].concat(tiles));
      tileLayer = this.scene.getLayer('tiles');
      for (i = _i = 0, _len = hexTiles.length; _i < _len; i = ++_i) {
        hexTileImage = hexTiles[i];
        Tween.get(hexTileImage).wait(unit.walkDuration * i).to({
          alpha: 0,
          scaleX: 1.5,
          scaleY: 1.5
        }, 600).call(function() {
          return tileLayer.removeChild(this);
        });
      }
      return unit.walk(tiles);
    };

    WingsOfLemuriaTactics.prototype.setScene = function() {
      this.generateGrid();
      this.scene.play();
      return this;
    };

    WingsOfLemuriaTactics.prototype.setTerrainPosition = function(x, y) {
      this.scene.terrain.y = this.scene.getLayer('tiles').y = this.scene.getLayer('units').y = y;
      return this.scene.terrain.x = this.scene.getLayer('tiles').x = this.scene.getLayer('units').x = x;
    };

    WingsOfLemuriaTactics.prototype.showTiles = function(tiles, assetName) {
      var bitmap, container, hexTiles, image, tile, tilePosition, x, y, _i, _len;
      if (assetName == null) {
        assetName = 'hex_target';
      }
      image = this.assets.get(assetName);
      container = this.scene.getLayer('tiles');
      hexTiles = [];
      for (_i = 0, _len = tiles.length; _i < _len; _i++) {
        tile = tiles[_i];
        x = tile[0], y = tile[1];
        bitmap = new Bitmap(image);
        tilePosition = HexTile.position(x, y, true);
        bitmap.x = tilePosition.x;
        bitmap.y = tilePosition.y;
        bitmap.regX = HexTile.WIDTH * 0.5;
        bitmap.regY = HexTile.HEIGHT * 0.5;
        container.addChild(bitmap);
        hexTiles.push(bitmap);
      }
      return hexTiles;
    };

    WingsOfLemuriaTactics.prototype.testUnit = function() {
      var column, particles, row, tiles, unit,
        _this = this;
      column = 0;
      row = 1;
      unit = this.addUnit('marine');
      unit.walk(4, 4);
      unit.face('left');
      particles = this.addParticle(unit, 'shield');
      unit = this.addUnit('vanguard');
      unit.walk(4, 5);
      unit.face('left');
      particles = this.addParticle(unit, 'shield');
      unit = this.addUnit('vanguard');
      particles = this.addParticle(unit, 'shield');
      tiles = [[1, 1], [2, 1], [3, 1], [4, 1]];
      tiles = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5]];
      unit.walk(column, row);
      this.moveUnit(unit, tiles);
      return unit.on('walkEnd', function() {
        var particle, _i, _len, _results;
        after(5000, function() {
          tiles.reverse();
          unit.walk(tiles[0][0], tiles[0][1]);
          return _this.moveUnit(unit, tiles);
        });
        return;
        _results = [];
        for (_i = 0, _len = particles.length; _i < _len; _i++) {
          particle = particles[_i];
          _results.push(particle.die());
        }
        return _results;
      });
    };

    WingsOfLemuriaTactics.prototype.testUnits = function() {
      var column, columns, row, rows, unit, units, _i, _results;
      rows = 7;
      columns = 8;
      units = ['marine', 'vanguard'];
      _results = [];
      for (row = _i = 0; 0 <= rows ? _i <= rows : _i >= rows; row = 0 <= rows ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (column = _j = 0; 0 <= columns ? _j <= columns : _j >= columns; column = 0 <= columns ? ++_j : --_j) {
            unit = this.addUnit(units[Math.round(Math.random() * (units.length - 1))]);
            unit.walk(column, row);
            unit.play(Math.round(Math.random() * (unit.totalFrames() - 1)));
            if (Math.random() > 0.5) {
              _results1.push(unit.face('left'));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    WingsOfLemuriaTactics.prototype.update = function() {
      var i, particle;
      i = 0;
      while (i < this.particles.length) {
        particle = this.particles[i];
        particle.update();
        if (particle.complete) {
          this.particles.splice(this.particles.indexOf(particle), 1);
          this.fxLayer.removeChild(particle.texture);
          i--;
        }
        i++;
      }
      this.fade.visible = !(this.fxParticle.visible = false);
      this.fxLayer.updateCache('destination-out');
      this.fade.visible = !(this.fxParticle.visible = true);
      return this.fxLayer.updateCache('lighter');
    };

    return WingsOfLemuriaTactics;

  })();

  window.onload = function() {
    var game;
    return game = new WingsOfLemuriaTactics;
  };

}).call(this);
